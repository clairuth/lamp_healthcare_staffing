<?php
// /home/ubuntu/lamp_healthcare_staffing/implementation/app/services/SquareService.php

require_once __DIR__ . 
'/../../core/Database.php
';
require_once __DIR__ . 
'/../../config.php
';

// In a real setup with Square PHP SDK: require __DIR__ . 
'/../../vendor/autoload.php
';
// use Square\SquareClient;
// use Square\Environment;
// use Square\Models\CreatePaymentRequest;
// use Square\Models\Money;
// use Square\Exceptions\ApiException;

class SquareService {
    private $db;
    private $accessToken;
    private $locationId;
    private $apiBaseUrl;
    // private $squareClient; // Would be used with the SDK

    public function __construct() {
        $this->db = Database::getInstance()->getConnection();
        $this->accessToken = defined(
'SQUARE_ACCESS_TOKEN
') ? SQUARE_ACCESS_TOKEN : 
'';
        $this->locationId = defined(
'SQUARE_LOCATION_ID
') ? SQUARE_LOCATION_ID : 
'';
        $this->apiBaseUrl = defined(
'SQUARE_API_BASE_URL
') ? SQUARE_API_BASE_URL : 
'https://connect.squareupsandbox.com
'; // Default to sandbox

        if (empty($this->accessToken) || empty($this->locationId)) {
            error_log("Square access token or location ID not configured.");
            // In a real app, throw an exception or handle this more gracefully
        }

        /* // SDK Initialization Example
        $this->squareClient = new SquareClient([
            'accessToken' => $this->accessToken,
            'environment' => strpos($this->apiBaseUrl, 'sandbox') !== false ? Environment::SANDBOX : Environment::PRODUCTION,
        ]);
        */
    }

    /**
     * Creates a payment using Square API, suitable for Cash App Pay.
     *
     * @param string $sourceId The payment token (nonce) generated by Square Web Payments SDK on the client-side.
     * @param float $amount The amount to charge.
     * @param string $currency The currency code (e.g., 'USD').
     * @param string $idempotencyKey A unique key for the request to prevent duplicate processing.
     * @param string $note Optional note for the payment.
     * @return array Result of the payment attempt.
     */
    public function createCashAppPayment($sourceId, $amount, $currency = 'USD', $idempotencyKey = null, $note = 'Healthcare Services') {
        if (empty($this->accessToken) || empty($this->locationId)) {
            return ['success' => false, 'message' => 'Square API credentials not configured.'];
        }

        if ($idempotencyKey === null) {
            $idempotencyKey = uniqid('sq_');
        }

        // Amount should be in the smallest currency unit (e.g., cents for USD)
        $amountInCents = (int)round($amount * 100);

        $payload = [
            'source_id' => $sourceId,
            'idempotency_key' => $idempotencyKey,
            'amount_money' => [
                'amount' => $amountInCents,
                'currency' => $currency
            ],
            'location_id' => $this->locationId,
            // 'autocomplete' => true, // Automatically complete (capture) the payment
            'note' => $note
            // For Cash App Pay, specific fields might be needed or handled by the sourceId generation process
        ];

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $this->apiBaseUrl . '/v2/payments');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($payload));
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Square-Version: 2023-10-18', // Specify API version
            'Authorization: Bearer ' . $this->accessToken,
            'Content-Type: application/json'
        ]);

        $result = curl_exec($ch);
        $httpStatusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

        if (curl_errno($ch)) {
            error_log('Square CreatePayment cURL error: ' . curl_error($ch));
            curl_close($ch);
            return ['success' => false, 'message' => 'cURL error during Square payment creation.'];
        }
        curl_close($ch);

        $data = json_decode($result, true);

        if ($httpStatusCode >= 200 && $httpStatusCode < 300 && isset($data['payment'])) {
            // Payment successful
            if (isset($data['payment']['status']) && $data['payment']['status'] === 'COMPLETED') {
                 return ['success' => true, 'payment_details' => $data['payment']];
            } elseif (isset($data['payment']['status']) && $data['payment']['status'] === 'APPROVED') {
                // Needs to be captured if not auto-captured
                return ['success' => true, 'payment_details' => $data['payment'], 'message' => 'Payment approved, may need capture.'];
            } else {
                return ['success' => true, 'payment_details' => $data['payment'], 'message' => 'Payment processed, status: ' . $data['payment']['status']];
            }
        } else {
            $errorMessage = 'Failed to create Square payment.';
            if (isset($data['errors']) && is_array($data['errors'])) {
                $errorMessages = [];
                foreach ($data['errors'] as $error) {
                    $errorMessages[] = $error['category'] . ' - ' . $error['code'] . ': ' . $error['detail'];
                }
                $errorMessage = implode('; ', $errorMessages);
            }
            error_log('Square CreatePayment API error: ' . $result);
            return ['success' => false, 'message' => $errorMessage, 'response' => $data, 'status_code' => $httpStatusCode];
        }
    }

    // Payouts via Square would typically be managed through Square Dashboard or specific payout APIs if available
    // For this platform, payouts to professionals might be handled by other means or a different service
    // if Square is only used for incoming CashApp payments.
}
?>
